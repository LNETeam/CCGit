{"ts":1373048914378,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1373048938256,"patch":[[{"diffs":[[1,"--===GIT===\r\n--=========\r\n--Developed by LNETeam from LNET Technologies\r\n\r\ntArgs = {...}\r\n\r\nif not http then\r\n    print( \"Git requires http API\" )\r\n    print( \"Set enableAPI_http to 1 in mod_ComputerCraft.cfg\" )\r\n    return\r\nend\r\n\r\nif  #tArgs == 0 then\r\n   print('Usage: git [get/view] [git owner] [repository] [branch] [path] {file-name}')\r\n   return false\r\nend\r\n\r\noption = tArgs[1]\r\nauthor = tArgs[2]\r\nproj = tArgs[3]\r\nbranch = tArgs[4]\r\npaths = tArgs[5]\r\nsaveName = tArgs[6]\r\n\r\nfunction edit(path)\r\n\r\ntArgs[1] = path\r\n\r\n-- Error checking\r\nlocal sPath = shell.resolve( tArgs[1] )\r\n\r\nlocal x,y = 1,1\r\nlocal w,h = term.getSize()\r\nlocal scrollX, scrollY = 0,0\r\n\r\nlocal tLines = {}\r\nlocal bRunning = true\r\n\r\n-- Colours\r\nlocal highlightColour, keywordColour, commentColour, textColour, bgColour\r\nif term.isColour() then\r\n    bgColour = colours.black\r\n    textColour = colours.white\r\n    highlightColour = colours.yellow\r\n    keywordColour = colours.yellow\r\n    commentColour = colours.lime\r\n    stringColour = colours.red\r\nelse\r\n    bgColour = colours.black\r\n    textColour = colours.white\r\n    highlightColour = colours.white\r\n    keywordColour = colours.white\r\n    commentColour = colours.white\r\n    stringColour = colours.white\r\nend\r\n\r\n-- Menus\r\nlocal bMenu = false\r\nlocal nMenuItem = 1\r\nlocal tMenuItems = {\"Exit\", \"Print\"}\r\nlocal sStatus = \"Press Ctrl to access menu\"\r\n\r\nlocal function load(_sPath)\r\n    tLines = {}\r\n    if fs.exists( _sPath ) then\r\n        local file = io.open( _sPath, \"r\" )\r\n        local sLine = file:read()\r\n        while sLine do\r\n            table.insert( tLines, sLine )\r\n            sLine = file:read()\r\n        end\r\n        file:close()\r\n    end\r\n    \r\n    if #tLines == 0 then\r\n        table.insert( tLines, \"\" )\r\n    end\r\nend\r\n\r\nlocal function save( _sPath )\r\n    -- Create intervening folder\r\n    local sDir = sPath:sub(1, sPath:len() - fs.getName(sPath):len() )\r\n    if not fs.exists( sDir ) then\r\n        fs.makeDir( sDir )\r\n    end\r\n\r\n    -- Save\r\n    local file = nil\r\n    local function innerSave()\r\n        file = fs.open( _sPath, \"w\" )\r\n        if file then\r\n            for n, sLine in ipairs( tLines ) do\r\n                file.write( sLine .. \"\\n\" )\r\n            end\r\n        else\r\n            error( \"Failed to open \".._sPath )\r\n        end\r\n    end\r\n    \r\n    local ok = pcall( innerSave )\r\n    if file then \r\n        file.close()\r\n    end\r\n    return ok\r\nend\r\n\r\nlocal tKeywords = {\r\n    [\"and\"] = true,\r\n    [\"break\"] = true,\r\n    [\"do\"] = true,\r\n    [\"else\"] = true,\r\n    [\"elseif\"] = true,\r\n    [\"end\"] = true,\r\n    [\"false\"] = true,\r\n    [\"for\"] = true,\r\n    [\"function\"] = true,\r\n    [\"if\"] = true,\r\n    [\"in\"] = true,\r\n    [\"local\"] = true,\r\n    [\"nil\"] = true,\r\n    [\"not\"] = true,\r\n    [\"or\"] = true,\r\n    [\"repeat\"] = true,\r\n    [\"return\"] = true,\r\n    [\"then\"] = true,\r\n    [\"true\"] = true,\r\n    [\"until\"]= true,\r\n    [\"while\"] = true,\r\n}\r\n\r\nlocal function tryWrite( sLine, regex, colour )\r\n    local match = string.match( sLine, regex )\r\n    if match then\r\n        if type(colour) == \"number\" then\r\n            term.setTextColour( colour )\r\n        else\r\n            term.setTextColour( colour(match) )\r\n        end\r\n        term.write( match )\r\n        term.setTextColour( textColour )\r\n        return string.sub( sLine, string.len(match) + 1 )\r\n    end\r\n    return nil\r\nend\r\n\r\nlocal function writeHighlighted( sLine )\r\n    while string.len(sLine) > 0 do  \r\n        sLine = \r\n            tryWrite( sLine, \"^%-%-%[%[.-%]%]\", commentColour ) or\r\n            tryWrite( sLine, \"^%-%-.*\", commentColour ) or\r\n            tryWrite( sLine, \"^\\\".-[^\\\\]\\\"\", stringColour ) or\r\n            tryWrite( sLine, \"^\\'.-[^\\\\]\\'\", stringColour ) or\r\n            tryWrite( sLine, \"^%[%[.-%]%]\", stringColour ) or\r\n            tryWrite( sLine, \"^[%w_]+\", function( match )\r\n                if tKeywords[ match ] then\r\n                    return keywordColour\r\n                end\r\n                return textColour\r\n            end ) or\r\n            tryWrite( sLine, \"^[^%w_]\", textColour )\r\n    end\r\nend\r\n\r\nlocal function redrawText()\r\n    for y=1,h-1 do\r\n        term.setCursorPos( 1 - scrollX, y )\r\n        term.clearLine()\r\n\r\n        local sLine = tLines[ y + scrollY ]\r\n        if sLine ~= nil then\r\n            writeHighlighted( sLine )\r\n        end\r\n    end\r\n    term.setCursorPos( x - scrollX, y - scrollY )\r\nend\r\n\r\nlocal function redrawLine(_nY)\r\n    local sLine = tLines[_nY]\r\n    term.setCursorPos( 1 - scrollX, _nY - scrollY )\r\n    term.clearLine()\r\n    writeHighlighted( sLine )\r\n    term.setCursorPos( x - scrollX, _nY - scrollY )\r\nend\r\n\r\nlocal function setLeftStatus()\r\nend\r\n\r\nlocal function redrawMenu()\r\n    term.setCursorPos( 1, h )\r\n    term.clearLine()\r\n\r\n    local sLeft, sRight\r\n    local nLeftColour, nLeftHighlight1, nLeftHighlight2\r\n    if bMenu then\r\n        local sMenu = \"\"\r\n        for n,sItem in ipairs( tMenuItems ) do\r\n            if n == nMenuItem then\r\n                nLeftHighlight1 = sMenu:len() + 1\r\n                nLeftHighlight2 = sMenu:len() + sItem:len() + 2\r\n            end\r\n            sMenu = sMenu..\" \"..sItem..\" \"\r\n        end\r\n        sLeft = sMenu\r\n        nLeftColour = textColour\r\n    else\r\n        sLeft = sStatus\r\n        nLeftColour = highlightColour\r\n    end\r\n    \r\n    -- Left goes last so that it can overwrite the line numbers.\r\n    sRight = \"Ln \"..y\r\n    term.setTextColour( highlightColour )\r\n    term.setCursorPos( w-sRight:len() + 1, h )\r\n    term.write(sRight)\r\n\r\n    sRight = tostring(y)\r\n    term.setTextColour( textColour )\r\n    term.setCursorPos( w-sRight:len() + 1, h )\r\n    term.write(sRight)\r\n\r\n    if sLeft then\r\n        term.setCursorPos( 1, h )\r\n        term.setTextColour( nLeftColour )\r\n        term.write(sLeft)       \r\n        if nLeftHighlight1 then\r\n            term.setTextColour( highlightColour )\r\n            term.setCursorPos( nLeftHighlight1, h )\r\n            term.write( \"[\" )\r\n            term.setCursorPos( nLeftHighlight2, h )\r\n            term.write( \"]\" )\r\n        end\r\n        term.setTextColour( textColour )\r\n    end\r\n    \r\n    -- Cursor highlights selection\r\n    term.setCursorPos( x - scrollX, y - scrollY )\r\nend\r\n\r\nlocal tMenuFuncs = { \r\n    Save=function()\r\n        if bReadOnly then\r\n            sStatus = \"Access denied\"\r\n        else\r\n            local ok, err = save( sPath )\r\n            if ok then\r\n                sStatus=\"Saved to \"..sPath\r\n            else\r\n                sStatus=\"Error saving to \"..sPath\r\n            end\r\n        end\r\n        redrawMenu()\r\n    end,\r\n    Print=function()\r\n        local sPrinterSide = nil\r\n        for n,sSide in ipairs(rs.getSides()) do\r\n            if peripheral.isPresent(sSide) and peripheral.getType(sSide) == \"printer\" then\r\n                sPrinterSide = sSide\r\n                break\r\n            end\r\n        end\r\n        \r\n        if not sPrinterSide then\r\n            sStatus = \"No printer attached\"\r\n            return\r\n        end\r\n\r\n        local nPage = 0\r\n        local sName = fs.getName( sPath )\r\n        local printer = peripheral.wrap(sPrinterSide)\r\n        if printer.getInkLevel() < 1 then\r\n            sStatus = \"Printer out of ink\"\r\n            return\r\n        elseif printer.getPaperLevel() < 1 then\r\n            sStatus = \"Printer out of paper\"\r\n            return\r\n        end\r\n        \r\n        local terminal = {\r\n            getCursorPos = printer.getCursorPos,\r\n            setCursorPos = printer.setCursorPos,\r\n            getSize = printer.getPageSize,\r\n            write = printer.write,\r\n        }\r\n        terminal.scroll = function()\r\n            if nPage == 1 then\r\n                printer.setPageTitle( sName..\" (page \"..nPage..\")\" )            \r\n            end\r\n            \r\n            while not printer.newPage() do\r\n                if printer.getInkLevel() < 1 then\r\n                    sStatus = \"Printer out of ink, please refill\"\r\n                elseif printer.getPaperLevel() < 1 then\r\n                    sStatus = \"Printer out of paper, please refill\"\r\n                else\r\n                    sStatus = \"Printer output tray full, please empty\"\r\n                end\r\n    \r\n                term.restore()\r\n                redrawMenu()\r\n                term.redirect( terminal )\r\n                \r\n                local timer = os.startTimer(0.5)\r\n                sleep(0.5)\r\n            end\r\n\r\n            nPage = nPage + 1\r\n            if nPage == 1 then\r\n                printer.setPageTitle( sName )\r\n            else\r\n                printer.setPageTitle( sName..\" (page \"..nPage..\")\" )\r\n            end\r\n        end\r\n        \r\n        bMenu = false\r\n        term.redirect( terminal )\r\n        local ok, error = pcall( function()\r\n            term.scroll()\r\n            for n, sLine in ipairs( tLines ) do\r\n                print( sLine )\r\n            end\r\n        end )\r\n        term.restore()\r\n        if not ok then\r\n            print( error )\r\n        end\r\n        \r\n        while not printer.endPage() do\r\n            sStatus = \"Printer output tray full, please empty\"\r\n            redrawMenu()\r\n            sleep( 0.5 )\r\n        end\r\n        bMenu = true\r\n            \r\n        if nPage > 1 then\r\n            sStatus = \"Printed \"..nPage..\" Pages\"\r\n        else\r\n            sStatus = \"Printed 1 Page\"\r\n        end\r\n        redrawMenu()\r\n    end,\r\n    Exit=function()\r\n        bRunning = false\r\n    end\r\n}\r\n\r\nlocal function doMenuItem( _n )\r\n    tMenuFuncs[tMenuItems[_n]]()\r\n    if bMenu then\r\n        bMenu = false\r\n        term.setCursorBlink( true )\r\n    end\r\n    redrawMenu()\r\nend\r\n\r\nlocal function setCursor( x, y )\r\n    local screenX = x - scrollX\r\n    local screenY = y - scrollY\r\n    \r\n    local bRedraw = false\r\n    if screenX < 1 then\r\n        scrollX = x - 1\r\n        screenX = 1\r\n        bRedraw = true\r\n    elseif screenX > w then\r\n        scrollX = x - w\r\n        screenX = w\r\n        bRedraw = true\r\n    end\r\n    \r\n    if screenY < 1 then\r\n        scrollY = y - 1\r\n        screenY = 1\r\n        bRedraw = true\r\n    elseif screenY > h-1 then\r\n        scrollY = y - (h-1)\r\n        screenY = h-1\r\n        bRedraw = true\r\n    end\r\n    \r\n    if bRedraw then\r\n        redrawText()\r\n    end\r\n    term.setCursorPos( screenX, screenY )\r\n    \r\n    -- Statusbar now pertains to menu, it would probably be safe to redraw the menu on every key event.\r\n    redrawMenu()\r\nend\r\n\r\n-- Actual program functionality begins\r\nload(sPath)\r\n\r\nterm.setBackgroundColour( bgColour )\r\nterm.clear()\r\nterm.setCursorPos(x,y)\r\nterm.setCursorBlink( true )\r\n\r\nredrawText()\r\nredrawMenu()\r\n\r\n-- Handle input\r\nwhile bRunning do\r\n    local sEvent, param, param2, param3 = os.pullEvent()\r\n    if sEvent == \"key\" then\r\n        if param == keys.up then\r\n            -- Up\r\n            if not bMenu then\r\n                if y > 1 then\r\n                    -- Move cursor up\r\n                    y = y - 1\r\n                    x = math.min( x, string.len( tLines[y] ) + 1 )\r\n                    setCursor( x, y )\r\n                end\r\n            end\r\n        elseif param == keys.down then\r\n            -- Down\r\n            if not bMenu then\r\n                -- Move cursor down\r\n                if y < #tLines then\r\n                    y = y + 1\r\n                    x = math.min( x, string.len( tLines[y] ) + 1 )\r\n                    setCursor( x, y )\r\n                end\r\n            end\r\n        elseif param == keys.tab then\r\n            -- Tab\r\n            if not bMenu then\r\n                local sLine = tLines[y]\r\n\r\n                -- Indent line\r\n                -- IN CASE OF INSERT TAB IN PLACE:\r\n                -- tLines[y] = string.sub(sLine,1,x-1) .. \"  \" .. string.sub(sLine,x)\r\n                tLines[y]=\"  \"..tLines[y]\r\n                x = x + 2\r\n                setCursor( x, y )\r\n                redrawLine(y)\r\n            end\r\n        elseif param == keys.pageUp then\r\n            -- Page Up\r\n            if not bMenu then\r\n                -- Move up a page\r\n                local sx,sy=term.getSize()\r\n                y=y-sy-1\r\n                if y<1 then y=1 end\r\n                x = math.min( x, string.len( tLines[y] ) + 1 )\r\n                setCursor( x, y )\r\n            end\r\n        elseif param == keys.pageDown then\r\n            -- Page Down\r\n            if not bMenu then\r\n                -- Move down a page\r\n                local sx,sy=term.getSize()\r\n                if y<#tLines-sy-1 then\r\n                    y = y+sy-1\r\n                else\r\n                    y = #tLines\r\n                end\r\n                x = math.min( x, string.len( tLines[y] ) + 1 )\r\n                setCursor( x, y )\r\n            end\r\n        elseif param == keys.home then\r\n            -- Home\r\n            if not bMenu then\r\n                -- Move cursor to the beginning\r\n                x=1\r\n                setCursor(x,y)\r\n            end\r\n        elseif param == keys[\"end\"] then\r\n            -- End\r\n            if not bMenu then\r\n                -- Move cursor to the end\r\n                x = string.len( tLines[y] ) + 1\r\n                setCursor(x,y)\r\n            end\r\n        elseif param == keys.left then\r\n            -- Left\r\n            if not bMenu then\r\n                if x > 1 then\r\n                    -- Move cursor left\r\n                    x = x - 1\r\n                elseif x==1 and y>1 then\r\n                    x = string.len( tLines[y-1] ) + 1\r\n                    y = y - 1\r\n                end\r\n                setCursor( x, y )\r\n            else\r\n                -- Move menu left\r\n                nMenuItem = nMenuItem - 1\r\n                if nMenuItem < 1 then\r\n                    nMenuItem = #tMenuItems\r\n                end\r\n                redrawMenu()\r\n            end\r\n        elseif param == keys.right then\r\n            -- Right\r\n            if not bMenu then\r\n                if x < string.len( tLines[y] ) + 1 then\r\n                    -- Move cursor right\r\n                    x = x + 1\r\n                elseif x==string.len( tLines[y] ) + 1 and y<#tLines then\r\n                    x = 1\r\n                    y = y + 1\r\n                end\r\n                setCursor( x, y )\r\n            else\r\n                -- Move menu right\r\n                nMenuItem = nMenuItem + 1\r\n                if nMenuItem > #tMenuItems then\r\n                    nMenuItem = 1\r\n                end\r\n                redrawMenu()\r\n            end\r\n        elseif param == keys.delete then\r\n            -- Delete\r\n            if not bMenu then\r\n                if  x < string.len( tLines[y] ) + 1 then\r\n                    local sLine = tLines[y]\r\n                    tLines[y] = string.sub(sLine,1,x-1) .. string.sub(sLine,x+1)\r\n                    redrawLine(y)\r\n                elseif y<#tLines then\r\n                    tLines[y] = tLines[y] .. tLines[y+1]\r\n                    table.remove( tLines, y+1 )\r\n                    redrawText()\r\n                    redrawMenu()\r\n                end\r\n            end\r\n        elseif param == keys.backspace then\r\n            -- Backspace\r\n            if not bMenu then\r\n                if x > 1 then\r\n                    -- Remove character\r\n                    local sLine = tLines[y]\r\n                    tLines[y] = string.sub(sLine,1,x-2) .. string.sub(sLine,x)\r\n                    redrawLine(y)\r\n            \r\n                    x = x - 1\r\n                    setCursor( x, y )\r\n                elseif y > 1 then\r\n                    -- Remove newline\r\n                    local sPrevLen = string.len( tLines[y-1] )\r\n                    tLines[y-1] = tLines[y-1] .. tLines[y]\r\n                    table.remove( tLines, y )\r\n                    redrawText()\r\n                \r\n                    x = sPrevLen + 1\r\n                    y = y - 1\r\n                    setCursor( x, y )\r\n                end\r\n            end\r\n        elseif param == keys.enter then\r\n            -- Enter\r\n            if not bMenu then\r\n                -- Newline\r\n                local sLine = tLines[y]\r\n                local _,spaces=string.find(sLine,\"^[ ]+\")\r\n                if not spaces then\r\n                    spaces=0\r\n                end\r\n                tLines[y] = string.sub(sLine,1,x-1)\r\n                table.insert( tLines, y+1, string.rep(' ',spaces)..string.sub(sLine,x) )\r\n                redrawText()\r\n            \r\n                x = spaces+1\r\n                y = y + 1\r\n                setCursor( x, y )\r\n            else\r\n                -- Menu selection\r\n                doMenuItem( nMenuItem )\r\n            end\r\n        elseif param == keys.leftCtrl or param == keys.rightCtrl then\r\n            -- Menu toggle\r\n            bMenu = not bMenu\r\n            if bMenu then\r\n                term.setCursorBlink( false )\r\n                nMenuItem = 1\r\n            else\r\n                term.setCursorBlink( true )\r\n            end\r\n            redrawMenu()\r\n        end\r\n        \r\n    elseif sEvent == \"char\" then\r\n        if not bMenu then\r\n            -- Input text\r\n            local sLine = tLines[y]\r\n            tLines[y] = string.sub(sLine,1,x-1) .. param .. string.sub(sLine,x)\r\n            redrawLine(y)\r\n        \r\n            x = x + string.len( param )\r\n            setCursor( x, y )\r\n        else\r\n            -- Select menu items\r\n            for n,sMenuItem in ipairs( tMenuItems ) do\r\n                if string.lower(string.sub(sMenuItem,1,1)) == string.lower(param) then\r\n                    doMenuItem( n )\r\n                    break\r\n                end\r\n            end\r\n        end\r\n        \r\n    elseif sEvent == \"mouse_click\" then\r\n        if not bMenu then\r\n            if param == 1 then\r\n                -- Left click\r\n                local cx,cy = param2, param3\r\n                if cy < h then\r\n                    y = math.min( math.max( scrollY + cy, 1 ), #tLines )\r\n                    x = math.min( math.max( scrollX + cx, 1 ), string.len( tLines[y] ) + 1 )\r\n                    setCursor( x, y )\r\n                end\r\n            end\r\n        end\r\n        \r\n    elseif sEvent == \"mouse_scroll\" then\r\n        if not bMenu then\r\n            if param == -1 then\r\n                -- Scroll up\r\n                if scrollY > 0 then\r\n                    -- Move cursor up\r\n                    scrollY = scrollY - 1\r\n                    redrawText()\r\n                end\r\n            \r\n            elseif param == 1 then\r\n                -- Scroll down\r\n                local nMaxScroll = #tLines - (h-1)\r\n                if scrollY < nMaxScroll then\r\n                    -- Move cursor down\r\n                    scrollY = scrollY + 1\r\n                    redrawText()\r\n                end\r\n                \r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n-- Cleanup\r\nterm.clear()\r\nterm.setCursorBlink( false )\r\nterm.setCursorPos( 1, 1 )\r\nend\r\n\r\nfunction requestObject(url,sN,mode)\r\n    if not url then error('Incorrect statement!') end\r\n    if not sN and mode == 'get' then error('Check mode!') end\r\n    if mode == 'get' then\r\n        write('Fetching: '..url..'... ')\r\n        http.request(url)\r\n        local requesting = true\r\n        while requesting do\r\n            local event, url, sourceText = os.pullEvent()\r\n            if event == \"http_success\" then\r\n                local respondedText = sourceText.readAll()\r\n                temp = io.open(sN,'w')\r\n                temp:write(respondedText)\r\n                temp:close()\r\n                print('Successfully saved!')\r\n                requesting = false\r\n                return true\r\n            elseif event == \"http_failure\" then\r\n                print(\"Fetch failed! Please check values or non-existent project!\")\r\n                requesting = false\r\n                return false\r\n            end\r\n        end\r\n    elseif mode == 'view' then\r\n        write('Fetching: '..url..'... ')\r\n        http.request(url)\r\n        local requesting = true\r\n        while requesting do\r\n            local event, url, sourceText = os.pullEvent()\r\n            if event == \"http_success\" then\r\n                local respondedText = sourceText.readAll()\r\n                print('Successfully fetched!\\n')\r\n                temp = io.open('temp','w')\r\n                temp:write(respondedText)\r\n                temp:close()\r\n                edit('temp')\r\n                fs.delete('temp')\r\n                requesting = false\r\n                return true\r\n            elseif event == \"http_failure\" then\r\n                print(\"Fetch failed!\")\r\n                requesting = false\r\n                return false\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction compileURL(auth,pro,bran,pat)\r\n    baseURL = 'https://raw.github.com/'..auth..'/'..pro..'/'..bran..'/'..pat\r\n    return baseURL\r\nend\r\n\r\nif option == 'get' then\r\n    if not option or not author or not proj or not branch or not paths or not saveName then print('Usage: git [get/view] [git owner] [repository] [branch] [path] {file-name}') return false end\r\n    statusCode = requestObject(compileURL(author,proj,branch,paths),saveName,option)\r\nelseif option =='view' then\r\n    if not option or not author or not proj or not branch or not paths then print('Usage: git [get/view] [git owner] [repository] [branch] [path] {file-name}') return false end\r\n    statusCode = requestObject(compileURL(author,proj,branch,paths),nil,option)\r\nend"]],"start1":0,"start2":0,"length1":0,"length2":21173}]],"length":21173,"saved":false}
{"contributors":[],"silentsave":false,"ts":1373128158009,"patch":[[{"diffs":[[0,"--===GIT"],[1," Shell"],[0,"===\r\n--="]],"start1":0,"start2":0,"length1":16,"length2":22},{"diffs":[[0,"========"],[1,"======"],[0,"\r\n--Deve"]],"start1":22,"start2":22,"length1":16,"length2":22},{"diffs":[[0,"unction "],[-1,"compile"],[1,"delFileFromCommit(delURL)\r\n   --http.post(delURL, nil) \r\nend\r\n\r\nfunction compileURL(auth,pro,bran,pat)\r\n    baseDURL = 'https://raw.github.com/'..auth..'/'..pro..'/delete/'..bran..'/'..pat\r\n    return baseDURL\r\nend\r\n\r\nfunction compileDel"],[0,"URL(auth"]],"start1":20445,"start2":20445,"length1":23,"length2":253}]],"length":21415,"saved":false}
